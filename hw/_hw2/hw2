2.1, 2.2, 2.5, 2.8, 2.13, 2.15, 2.20

2.1 - 
 8 steps:
  Int => Int Digit => Int Digit Digit => Int Digit Digit Digit => Digit Digit Digit Digit =>
    4 Digit Digit Digit => 4 5 Digit Digit => 4 5 2 Digit => 4 5 2 0
    
 in general, it takes 2d steps for an integer with d digits
 
2.2 -
 Int => Int Digit => Int 0 => Int Digit 0 => Int 2 0 => Int Digit 2 0 => Int 5 2 0 => Digit 5 2 0 =>
   4 5 2 0
   
2.5 - None of the given expressions are grammatical given the grammar in figure 2.7. Each of them would require some sequence of
       rewrites equivalent to a symbol containing a itself, which the grammar only allows in one case -- a Primary may be composed
       of an Expression surrounded by parantheses. All of the given expressions could be made correct by including parentheses, but
       otherwise would require a recursive rule which does not exist.
 a.) x = x + a - 1; 
 b.) a = b * c / d;
 c.) i = i + j * k - 3;
 
2.8 - in 2.8a.png and 2.8b.png

2.13 - change the rule for an if statement to
 ifStatement ::= if ( _expression_ ) _statement_ fi | if ( _expression_ ) _statement_ fi else _statement_
 
2.15 - in EBNF [] denotes a single optional symbol or sequence of symbols, so the translation rule to BNF would be:
	  c ::= a [ b ] => c ::= a | a b
       {} denote zero or more occurences of the enclosed portion, so the translation rule would be:
          c ::= a { b } => c ::= a | c b
          
