hw 1: 1.1, 1.2, 1.3, 1.4, 1.10

1.1 - 
  a) Eiffel was designed as a fairly high-level OO language. All computation occurs within classes,
     which relates it to Java and Smalltalk, other highly-object oriented languages. It supports contract-base programming,
     where a unit of computation may be supplied with preconditions and postconditions which it is guaranteed to maintain.
  
  b) Perl was designed and is used for many different kinds of programming tasks. The language does not enforce any particular paradigm.
     One noteable aspect of Perl which is immediately obvious upon looking at the code is that variable names are always prepended with a
     "sigil" which marks the identifier as a: being a variable identifier, and b: with the type of the contained data. This allows identifiers
     to be conveniently interpolated with string literals, which plays into Perl's reputation as a powerful text-processing language.
     The common implementation is an interpreter, which is included on many linux systems.
     
  c) Python is a relatively young multiparadigm language which is designed to make program development simple and quick.
     The language is dynamically typed, which can lead to difficult-to-find errors, but which makes programs simpler and easy to draft.
     Python provides some support for imperative, object-oriented, and functional programming styles, with largely C-like imperative style
     but with rich support for user-defined types and inheritance as well as first-class functions and a few functional staples like map()
     and an immutable list type tuple.
     
1.2 -
  if( ptr = malloc( strlen(argv[i]) * sizeof(char) && strcpy(ptr, argv[i++]) ){ }
  else return 1;
  
  could be:
  
  ptr = malloc( strlen(argv[i]) * sizeof(char) );
  if (ptr == NULL)
    return 1;
  
  strcpy(ptr, argv[i]);
  ++i;
  
1.3 -
  a) Algol was designed by a committee computer scientists to support various types of structured programming, while most of its
     contemporaries (notably the ones Dijkstra mentions) were designed without the input of the larger academic CS community.
  
  b) A possible middle-ground interpretation of the statement would be that a programming language cannot be appropriately expressive 
     and also constrain programmers to only writing good code. The burden of writing good code must fall on both the language and the
     programmer, in that the language should make it easy to write good code and the programmer must then actually write good code.
     
1.4 -
  an example of orthogonality in C++ is the concept of user-defined operator overloading. The programmer can define operators to work
  on her code in a natural way, which makes user-defined types orthoganal to the built-in types. An example of non-orthoganality in Java
  is the difference in behavior between the "simple" tyoes and the reference types (built-in numeric types vs. Objects). Java is a 
  highly object-oriented language, and many of the feature of the language play into the OO abstraction; however, much of the common data
  in a program behaves completely outside of an OO model.
  
1.10
  Java vs. Python:
  Simplicity and Readability:
   Java borrows heavily from C in its language design, with object-oriented features added on. Java programs tend to be a bit verbose
   compared to some languages because every variable has a type signature, and the types are frequently class names which are lengthy by
   convention. 
   
   Python was designed with readability in mind: variables do not have explicit types, and their type may change during their lifetime.
   this makes programs read more naturally, and conserves some use of new variable names, but can also obscure some of the action. Python's
   control structures use english words and whitespace/indentation as boundaries, so they read very naturally without having to parse
   special characters or inconsistent indentation. In particular python's boolean operators make conditional expressions very easy to read,
   because they are all english words (is, not, or, and, in). Some special care is given to ensure that negation of boolean operators reads
   in an english-like way as well, so that the operator "x not in y" is the negation of "x in y".
   
  Clarity about binding
   Java and Python have similar schemes for binding, although Python is purely interpreted as opposed to Java's compile-to-bytecode scheme.
   Python also allows the explicit definition of "generators", which are functions and data structures whose value isn't bound until they are
   evaluated.
  
  Reliability
   Java and python are both very reliable; the canonical implementations are available on most systems, and there are a variety of other imlementations
   which generally follow the language specs well.
  
  Support
   Java is hugely popular as a development language and is backed by the Sun/Oracle corporation, so it's got like, hella support. Python is hugely
   popular and has one of the most accessible language references I've ever seen.
  
  Abstraction
   Java supplies tools for object oriented abstraction, along with a vary large standard library and a well developed packaging system. Python is even
   further abstracted by its dynamic typing.
  
  Orthogonality
   Java is not particularly orthogonal in its design; while most of the language can be explained as interactions between objects, the "primitive" types
   are essentially the same as C types, and Array types are in a strange limbo between being an object and being a primitive type.
  
  Efficient implementation
   Both Python and Java pay a price for their high levels of abstraction, being multiple times slower than C for many tasks. Java's main implementation,
   the Sunspot JVM, employs a variety of innovations in interpreter technology, such as just in time compilation, to substantially improve speed
   compared to older JVMs. The primary Python implementation, CPython, is quick but not THAT quick. There is an implementation called PyPy which uses
   many of the same methods as the Sunspot JVM to improve performance. One advantage to Python in terms of efficiency is that much of the standard
   library is actually C code, and the CPython implementation allows relatively easy extension using C.
   